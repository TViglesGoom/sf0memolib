#!/usr/bin/env bash

# Using ANSI colours
NC='\033[0m' # No Color
BLACK='\033[0;30m'
DARK_GRAY='\033[1;30m'
RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
GREEN='\033[0;32m'
LIGHT_GREEN='\033[1;32m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
LIGHT_BLUE='\033[1;34m'
PURPLE='\033[0;35m'
LIGHT_PURPLE='\033[1;35m'
CYAN='\033[0;36m'
LIGHT_CYAN='\033[1;36m'
LIGHT_GRAY='\033[0;37m'
WHITE='\033[1;37m'
# echo -e "I ${RED}love${NC} Stack Overflow"

BASE_PATH=$(pwd)
DEV_SESSION_NAME="memolib-dev"
PROD_SESSION_NAME="memolib-build"

if [ $1 == 'dev' ]
then
	echo "statring development mode"
	./mem0lib db:up
	tmux has-session -t $DEV_SESSION_NAME 2>/dev/null
	if [ $? == 0 ]
	then
		tmux kill-session -t $DEV_SESSION_NAME
	fi
	tmux new-session -d -s $DEV_SESSION_NAME
	tmux neww -n web-api -t $DEV_SESSION_NAME: 'cd ./web-api && npm run dev'
	tmux neww -n web-ui -t $DEV_SESSION_NAME: 'cd ./web-ui && npm run dev'
	tmux a -t $DEV_SESSION_NAME
elif [ $1 == 'prod' ]
then
	echo "building production version"
	./mem0lib db:up
	tmux has-session -t $PROD_SESSION_NAME 2>/dev/null
	if [ $? == 0 ]
	then
		tmux kill-session -t $PROD_SESSION_NAME
	fi
	tmux new-session -d -s $PROD_SESSION_NAME
	tmux neww -n web-api -t $PROD_SESSION_NAME: 'cd ./web-api && npm run build'
	tmux neww -n web-ui -t $PROD_SESSION_NAME: 'cd ./web-ui && npm run build'
	tmux a -t $PROD_SESSION_NAME
elif [ $1 == 'db:init' ]
then
  echo "building CouchDB service"
  docker build -t sf0/mem0lib/couchdb ./databases/couchdb

  docker run -e COUCHDB_USER=admin -e COUCHDB_PASSWORD=password \
  -p 5984:5984 -d --name mem0lib-couchdb \
  -v $(pwd)/databases/couchdb/data:/opt/couchdb/data \
  -v $(pwd)/databases/couchdb/etc:/opt/couchdb/etc/local.d \
  -v $(pwd)/databases/couchdb/log:/opt/couchdb/log \
  sf0/dpuddle-couchdb
elif [ $1 == 'db:up' ]
then
  echo "(re-)starting CouchDB service"
  docker start mem0lib-couchdb
  docker ps -a
elif [ $1 == 'db:down' ]
then
  echo "stopping CouchDB service"
  docker stop mem0lib-couchdb
elif [ $1 == 'db:backup' ]
then
  echo "@todo: backup data ;env and conf?"
  echo "zip up ./databases/couchdb/data && ./databases/couchdb/etc dirs (and logs)"
elif [ $1 == 'db:restore' ]
then
  echo "@todo: restore data ;env and conf"
  # ..
elif [ $1 == 'install' ]
then
  cp "$BASE_PATH/.env.example" "$BASE_PATH/.env"
elif [ $1 == 'uninstall' ]
then
  rm -rf .env
elif [ $1 == 'help' ] || [ $1 == '--help' ]
then
  __help_message="
${ORANGE}Usage: $(basename $0) [SUB COMMAND]${NC}\n\n

Available sub-commands:\n
  \n
  ${ORANGE}General${NC}\n
  \n
  ${LIGHT_CYAN}install${NC}\n
  \t Install pre-requisites\n
  ${LIGHT_CYAN}uninstall${NC}\n
  \t Uninstall pre-requisites n\n
  ${LIGHT_CYAN}--help${NC}\n
  \t Display help message\n
  \n
  ${ORANGE}CouchDB service${NC}\n
  \n
  ${LIGHT_CYAN}db:init${NC}\n
  \t Create new CouchDB container. \n
  \t @techdebt db:destroy 'docker container rm datapuddle-couchdb'\n
  ${LIGHT_CYAN}db:up${NC}\n
  \t Start CouchDB service\n
  ${LIGHT_CYAN}db:down${NC}\n
  \t Stop CouchDB service n\n
"
  echo -e $__help_message
else
  echo "Unrecognized command: $1"
  echo "try running: \"./mem0lib --help\""
fi
