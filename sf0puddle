#!/usr/bin/env bash

# Using ANSI colours
NC='\033[0m' # No Color
BLACK='\033[0;30m'
DARK_GRAY='\033[1;30m'
RED='\033[0;31m'
LIGHT_RED='\033[1;31m'
GREEN='\033[0;32m'
LIGHT_GREEN='\033[1;32m'
ORANGE='\033[0;33m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
LIGHT_BLUE='\033[1;34m'
PURPLE='\033[0;35m'
LIGHT_PURPLE='\033[1;35m'
CYAN='\033[0;36m'
LIGHT_CYAN='\033[1;36m'
LIGHT_GRAY='\033[0;37m'
WHITE='\033[1;37m'
# echo -e "I ${RED}love${NC} Stack Overflow"

SCRIPT_ROOT_PATH=$(pwd)

if [ $1 == 'couch:create' ]
then
  echo "building CouchDB service"
  docker build -t sf0/dpuddle-couchdb ./databases/couchdb

  docker run -e COUCHDB_USER=admin -e COUCHDB_PASSWORD=password \
  -p 5984:5984 -d --name datapuddle-couchdb \
  -v $(pwd)/databases/couchdb/data:/opt/couchdb/data \
  -v $(pwd)/databases/couchdb/etc:/opt/couchdb/etc/local.d \
  -v $(pwd)/databases/couchdb/log:/opt/couchdb/log \
  sf0/dpuddle-couchdb
elif [ $1 == 'couch:up' ]
then
  echo "(re-)starting CouchDB service"
  docker start datapuddle-couchdb
  docker ps -a
elif [ $1 == 'couch:down' ]
then
  echo "stopping CouchDB service"
  docker stop datapuddle-couchdb
elif [ $1 == 'couch:backup' ]
then
  echo "@todo: backup data ;env and conf?"
  echo "zip up ./databases/couchdb/data && ./databases/couchdb/etc dirs (and logs)"
elif [ $1 == 'couch:restore' ]
then
  echo "@todo: restore data ;env and conf?"
  # ..
elif [ $1 == 'redis:up' ]
then
  echo "adoption pending: starting Redis service"
elif [ $1 == 'memgraph:up' ]
then
  echo "adoption pending: starting Memgraph service"
elif [ $1 == 'dgraph:up' ]
then
  echo "adoption pending: starting DGraph service"
elif [ $1 == 'arrango:up' ]
then
  echo "adoption pending: starting ArangoDB service"
#elif [ $1 == 'down' ]
#then
#  echo "stopping project: "
elif [ $1 == 'install' ]
then
  $SCRIPT_ROOT_PATH/deps-install.sh # install shell deps
  cd "$SCRIPT_ROOT_PATH" && npm install
  cp "$SCRIPT_ROOT_PATH/.env.example" "$SCRIPT_ROOT_PATH/.env"
elif [ $1 == 'uninstall' ]
then
  $SCRIPT_ROOT_PATH/deps-uninstall.sh # purge shell deps
  rm -rf $SCRIPT_ROOT_PATH/node_modules .pm2 .env
elif [ $1 == 'status' ]
then
  # status info
  echo "docker ps -a"
  docker ps -a
  #echo -e "pm2 status:\n"
  #PM2_HOME='./.pm2' npx pm2 status pm2.sf0port.yml
  echo "---"
  echo -e "git status:\n"
  git status
  echo -e "\ngit remotes:\n"
  git remote -v
  echo "---"
  echo "installed npm modules:"
  echo -e "  at project root: `lsd -A $SCRIPT_ROOT_PATH/node_modules/ | wc -l`"
elif [ $1 == 'diagnostic' ]
then
  echo "Running Diagnostics: "
  neofetch
  echo "---"
  echo "npm version: `npm --version`"
  echo "node version: `node --version`"
  echo "git version: `node --version`"
  echo "`docker --version`"
  # @todo: npm install if required
  echo "---"
elif [ $1 == 'help' ] || [ $1 == '--help' ]
then
  __help_message="
${ORANGE}Usage: $(basename $0) [SUB COMMAND]${NC}\n\n

Available sub-commands:\n
  \n
  ${ORANGE}General${NC}\n
  \n
  ${LIGHT_CYAN}status${NC}\n
  \t Display codebase and runtime status\n
  ${LIGHT_CYAN}diagnostic${NC}\n
  \t Run diagnostic checks\n
  ${LIGHT_CYAN}install${NC}\n
  \t Install pre-requisites\n
  ${LIGHT_CYAN}uninstall${NC}\n
  \t Uninstall pre-requisites n\n
  ${LIGHT_CYAN}--help${NC}\n
  \t Display help message\n
  \n
  ${ORANGE}CouchDB service${NC}\n
  \n
  ${LIGHT_CYAN}couch:create${NC}\n
  \t Create new CouchDB container. \n
  \t @techdebt couch:destroy 'docker container rm datapuddle-couchdb'\n
  ${LIGHT_CYAN}couch:up${NC}\n
  \t Start CouchDB service\n
  ${LIGHT_CYAN}couch:down${NC}\n
  \t Stop CouchDB service n\n
  ${LIGHT_CYAN}couch:backup${NC}\n
  \t Backup CouchDB data, logs and config\n
  ${LIGHT_CYAN}couch:restore${NC}\n
  \t Restore CouchDB data and config\n  
"
  echo -e $__help_message
else
  echo "Unrecognized command: $1"
  echo "try running: \"./sf0puddle --help\""
fi
